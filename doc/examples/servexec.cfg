// This file controls server side variables which influence gameplay (which must be prefixed with 'sv_')
// It is executed whenever variables are reset (on start, and whatever 'resetvarsonend' tells it to)
//
// sv_serverclients 16 // maximum number of allowed clients
// sv_serverdesc "My server" // server description
// sv_servermotd "Welcome to my server!" // server message of the day
// sv_serveropen 3 // determines server openness for public use; 0 = allow "setpriv 1" and locked/private, 1 = allow "setpriv 1" but no privileged mode, no locked/private, 2 = allow "setpriv 1" but disallows private privileged mode (for public coop-editing), 3 = privilege only by moderator or admin
// sv_autoadmin 0 // determines if authorities claim status by default
// sv_airefresh 1000 // delay imposed before the AI manager reorganises their setup
// sv_modelockfilter 60 // determines the modes which are allowed to be used as dictated by modelock, convenient to set using a sum of $modebit* vars (available: editing, deathmatch, capture, defend, bomber, trial) example: (+ $modebitediting $modebitdeathmatch)
// sv_mutslockfilter 131071 // determines the mutators which are allowed to be used as dictated by modelock, convenient to set using a sum of $mutsbit* vars (available: multi, team, coop, instagib, medieval, ballistic, duel, survivor, arena, onslaught, jetpack, vampire, expert, resize, gsp1 = first mode variation {ctf-return, dtf-quick, bomber-hold}, gsp2 = second mode variation {ctf-defend, dtf-conquer}, gsp3 = third mode variation {ctf-protect, dtf-king-of-the-hill}) example: (+ $mutsbitmulti $mutsbitteam)
// sv_modelock 5 // determines if modes are locked; 0 = off, 1-3 = helper/moderator/admin only, 4-6 = helper/moderator/admin can only set limited mode and  higher, 7 = no mode selection
// sv_mapslock 5 // determines if maps are locked; 0 = off, 1-3 = helper/moderator/admin can select non-allow maps, 4-6 = helper/moderator/admin can select non-rotation maps, 7 = no map selection
// sv_varslock 2 // determines if vars are locked; 0 = off, 1 = helper, 2 = moderator, 3 = admin, 4 = nobody
// sv_votelock 2 // determines if votes are locked; 0 = off, 1-3 = helper/moderator/admin can select same game, 4 = helper/moderator/admin only can vote, 7 = no voting
// sv_votewait 2500 // time in milliseconds before a player may cast another vote (to avoid flooding)
// sv_votestyle 2 // determines how mid-match votes are handled; 0 = votes don't pass mid-match, 1 = passes if votethreshold is met, 2 = passes if unanimous
// sv_voteinterm 2 // 0 = must wait entire time, 1 = passes if votethreshold is met, 2 = passes if unanimous
// sv_resetmmonend 2 // determines when privilege mode changes are reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetallowsonend 1 // determines when the allow list is reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetbansonend 1 // determines when the ban list is reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetmutesonend 1 // determines when the mute list is reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetlimitsonend 1 // determines when the limit list is reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetvarsonend 1 // determines when these game variables are reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_demolock 2 // determines who may record demos; 0 = helper, 1 = moderator, 2 = administrator, 3 = nobody
// sv_speclock 1 // determines who may force players to spectate;  0 = helper, 1 = moderator, 2 = admin, 3 = nobody
// sv_kicklock 1 // determines who may kick players; 0 = helper, 1 = moderator, 2 = admin, 3 = nobody
// sv_allowlock 1 // determines who may allow players; 0 = helper, 1 = moderator, 2 = admin, 3 = nobody
// sv_banlock 1 // determines who may ban players; 0 = helper, 1 = moderator, 2 = admin, 3 = nobody
// sv_mutelock 1 // determines who may mute players; 0 = helper, 1 = moderator, 2 = admin, 3 = nobody
// sv_limitlock 1 // determines who may limit players; 0 = helper, 1 = moderator, 2 = admin, 3 = nobody
// sv_floodlock 3 // 0 = no flood lock, 1 = lock below helper, 2 = lock below moderator, 3 = lock below administrator, 4 = lock everyone
// sv_floodmute 3 // automatically mute player when warned this many times
// sv_floodtime 10000 // time span to check for floody messages
// sv_floodlines 5 // number of lines in aforementioned span before too many
// sv_gamespeedlock 3 // determines if gamespeed is locked (also limited by varslock); 0 = off, 1 = helper, 2 = moderator, 3 = admin, 4 = nobody
// sv_gamespeed 100 // override gameplay speed
// sv_gamepaused 0 // pauses the game, automatically unset by server
// sv_defaultmap "" // default map, "" = random
// sv_defaultmode 2 // default game mode; 1 = editing, 2 = deathmatch, 3 = ctf, 4 = dtf, 5 = bomber, 6 = trial
// sv_defaultmuts 0 // default mutators, convenient to set using a sum of $mutsbit* vars (available: multi, team, coop, instagib, medieval, ballistic, duel, survivor, arena, onslaught, jetpack, vampire, expert, resize, gsp1 = first mode variation {ctf-return, dtf-quick, bomber-hold}, gsp2 = second mode variation {ctf-defend, dtf-conquer}, gsp3 = third mode variation {ctf-protect, dtf-king-of-the-hill}
// sv_rotatemode 1 // determines if modes rotate when the server selects the next map
// sv_rotatemuts 3 // determines if mutators rotate when the server selects the next map (more than 1 decreases chances)
// sv_rotatemodefilter 60 // determines the modes which can be selected when the server selects the next map, convenient to set using a sum of $modebit* vars (available: editing, deathmatch, capture, defend, bomber, trial) example: (+ $modebitediting $modebitdeathmatch)
// sv_rotatemutsfilter 126367 // determines the mutators which can be selected when the server selects the next map, convenient to set using a sum of $mutsbit* vars (available: multi, team, coop, instagib, medieval, ballistic, duel, survivor, arena, onslaught, jetpack, vampire, expert, resize, gsp1 = first mode variation {ctf-return, dtf-quick, bomber-hold}, gsp2 = second mode variation {ctf-defend, dtf-conquer}, gsp3 = third mode variation {ctf-protect, dtf-king-of-the-hill} example: (+ $mutsbitmulti $mutsbitteam)
// sv_allowmaps "ares bath biolytic blink canals cargo center colony conflict darkness dawn deadsimple deathtrap deli depot dropzone dutility echo error facility forge foundation fourplex futuresport ghost hawk hinder industrial institute isolation keystone2k lab linear longestyard mist neodrive nova oneiroi panic processing pumpstation purge spacetech starlibido stone testchamber tower tranquility tribal ubik venus warp wet" // allowed maps
// sv_mainmaps "ares bath biolytic canals cargo center colony conflict darkness deadsimple deathtrap deli depot dropzone dutility echo error foundation fourplex futuresport ghost industrial institute isolation keystone2k linear longestyard mist nova oneiroi panic processing pumpstation spacetech starlibido stone tower tribal ubik venus warp wet" // deathmatch maps
// sv_capturemaps "ares bath biolytic canals cargo center colony conflict darkness deadsimple deli depot dropzone dutility echo foundation fourplex futuresport ghost industrial institute isolation keystone2k linear mist nova panic pumpstation stone tribal venus warp wet" // capture-the-flag maps
// sv_defendmaps "ares bath biolytic canals cargo center colony conflict darkness deadsimple deli depot dropzone dutility echo foundation fourplex futuresport ghost industrial institute isolation keystone2k linear mist nova panic processing pumpstation stone tower tribal ubik venus warp wet" // defend-the-flag maps
// sv_kingmaps "ares bath biolytic cargo center colony conflict darkness deadsimple depot dropzone dutility echo fourplex futuresport industrial keystone2k linear processing stone tower tribal ubik venus" // king-of-the-hill maps
// sv_bombermaps "ares bath biolytic canals cargo center colony conflict darkness deadsimple deli depot dropzone dutility echo foundation futuresport fourplex ghost industrial isolation linear mist nova pumpstation stone tower tribal venus warp wet" // bomber-ball maps
// sv_holdmaps "ares bath biolytic canals cargo center colony conflict darkness deadsimple deli depot dropzone dutility echo foundation fourplex futuresport ghost industrial isolation keystone2k linear mist nova panic processing pumpstation stone tower tribal ubik venus warp wet" // hold bomber-ball maps
// sv_trialmaps "hawk hinder neodrive purge testchamber" // time-trial maps
// sv_multimaps "canals deadsimple depot keystone2k warp isolation fourplex" // maps allowed for modes which *require* multi spawns (ctf/bb)
// sv_duelmaps "bath darkness deadsimple dutility echo fourplex ghost longestyard starlibido stone panic wet" // duel map filter (extra filter on top of mode filter)
// sv_jetpackmaps "ares biolytic canals cargo center colony conflict darkness dawn deadsimple deathtrap deli depot dropzone dutility echo error forge fourplex futuresport ghost isolation linear longestyard mist nova oneiroi pumpstation spacetech starlibido testchamber tower tranquility tribal ubik venus warp" // jetpack map filter (extra filter on top of mode filter)
// sv_maprotate 2 // determines behaviour of map rotation; 0 = off, 1 = sequence, 2 = random
// sv_maxcarry 2 // maximum number of weapons a player can carry, plus pistol and grenades
// sv_spawnrotate 2 // spawn point rotation; 0 = let client decide, 1 = sequence, 2 = random
// sv_spawnweapon 1 // weapon players spawn with, defaults to pistol (1)
// sv_instaweapon 7 // weapon players spawn with in instagib, defaults to rifle (7)
// sv_trialweapon 0 // weapon players spawn with in trial, defaults to melee only (0)
// sv_spawngrenades 0 // spawn with grenades; 0 = never, 1 = all but instagib/time-trial, 2 = always
// sv_spawndelay 5000 // time in milliseconds before players can respawn in most modes
// sv_instadelay 3000 // time in milliseconds before players can respawn in instagib mutated modes
// sv_trialdelay 500 // time in milliseconds before players can respawn in trial mode
// sv_spawnprotect 3000 // time in milliseconds after spawning players cannot be damaged
// sv_duelprotect 5000 // time in milliseconds after spawning players cannot be damaged in duel/survivor matches
// sv_instaprotect 3000 // time in milliseconds after spawning players cannot be damaged in instagib matches
// sv_maxhealth 1.5 // spawnhealth * maxhealth defines the maximum amount of health that can be reached (e.g. standing next to a friendly goal)
// sv_maxhealthvampire 2.0 // spawnhealth * maxhealthvampire defines the maximum amount of health that can be reached by damaging other players in vampire
// sv_burntime 5500 // time in milliseconds fire burns for, try to allow an extra 500ms breathing room for sync
// sv_burndelay 1000 // time in milliseconds for which fire burning deals damage
// sv_burndamage 3 // amount of damage fire burning deals
// sv_bleedtime 5500 // time in milliseconds bleeding lasts for, try to allow an extra 500ms breathing room for sync
// sv_bleeddelay 1000 // time in milliseconds for which bleeding deals damage
// sv_bleeddamage 3 // amount of damage bleeding deals
// sv_regendelay 3000 // time in milliseconds after being damage before normal regeneration resumes
// sv_regentime 1000 // time in milliseconds for which regenerate gives health
// sv_regenhealth 5 // amount of health regneration gives
// sv_captureregenbuff 1 // 0 = off, 1 = modify regeneration when buffed
// sv_captureregendelay 1000 // regen this often when buffed
// sv_captureregenextra 2 // add this to regen when buffed
// sv_capturebuffdelay 1000 // buffed when guarding, and for this long after
// sv_capturebuffdamage 1.5 // multiply outgoing damage by this much when buffed
// sv_capturebuffshield 1.5 // divide incoming damage by this much when buffed
// sv_itemsallowed 2 // determines if items are present in the level; 0 = never, 1 = all but instagib, 2 = always
// sv_itemspawntime 15000 // time in milliseconds before items (re)spawn
// sv_itemspawndelay 1000 // time in milliseconds after map start items first spawn
// sv_itemthreshold 2.0 // if numitems/(players*maxcarry) is less than this, spawn one of this type
// sv_itemspawnstyle 1 // determines the timing of item spawning at map start; 0 = all at once, 1 = staggered, 2 = random, 3 = randomise between both
// sv_kamikaze 1 // determines the level of kamikaze events; 0 = never, 1 = holding grenade, 2 = have grenade, 3 = always
// sv_timelimit 10 // time in minutes before round ends; 0 = off
// sv_triallimit 60000 // time in milliseconds after the first player crosses the finishing line in a non-looping trial map players have to complete
// sv_intermlimit 15000 // time in milliseconds intermission lasts
// sv_votelimit 45000 // time in milliseconds intermission voting lasts
// sv_duellimit 5000 // time in milliseconds before next round in duel/survivor
// sv_duelclear 1 // determines if items are reset at the end of each round
// sv_selfdamage 1 // determines if the player can damage themselves; 0 = off, 1 = either hurt self or use teamdamage rules
// sv_trialstyle 0 // 0 = all players are ghosts, 1 = all players are solid, but can't deal damage, 2 = regular gameplay style, solid+damage
// sv_teamdamage 1 // determines if the player can damage team members; 0 = off, 1 = non-bots damage team, 2 = all players damage team
// sv_teambalance 1 // determines the method of team balancing; 0 = off, 1 = by number then rank, 2 = by rank then number
// sv_pointlimit 0 // number of points required to end the round (and win) in deathmatch modes
// sv_capturelimit 0 // number of captures required to end the round (and win) in ctf
// sv_captureresetdelay 30000 // time in milliseconds before a dropped flag automatically resets
// sv_defendlimit 0 // determines the style of dtf play; number of points required to end the round (and win) in dtf
// sv_defendpoints 1 // number of points given in dtf
// sv_defendoccupy 100 // points needed to occupy in regular games
// sv_defendking 25 // points needed to occupy in king-of-the-hill
// sv_defendflags 3 // flags to init and how; 0 = init all (neutral), 1 = init neutral and team only, 2 = init team only, 3 = init all (team + neutral + converted)
// sv_botskillmin 50 // minimum randomly assigned AI skill level
// sv_botskillmax 75 // maximum randomly assigned AI skill level
// sv_botbalance -1 // determines bot balancing method; -1 = always use numplayers, 0 = don't balance, 1 or more = fill only with this*numteams
// sv_botscale 1.0 // scale the 'numplayers' world variable which determines bot auto population
// sv_botlimit 16 // maximum number of bots allowed, regardless of any other variable/setting
// sv_enemybalance 1 // multiply number of enemy spawns by this much
// sv_enemyspawntime 30000 // determine length of time before enemies respawn
// sv_enemyspawndelay 1000 // determine length of time after map start enemies first spawn
// sv_enemyspawnstyle 1 // determines enemy spawning style, 0 = all at once, 1 = staggered, 2 = random, 3 = randomise between both
// sv_gravityforce -1.0 // overrides world variable: gravity
// sv_gravityscale 1.0 // multiply gravity by this much
// sv_liquidspeedforce -1.0 // overrides world variable: liquidspeed
// sv_liquidspeedscale 1.0 // multiply liquidspeed by this much
// sv_liquidcoastforce -1.0 // overrides world variable: liquidcoast
// sv_liquidcoastscale 1.0 // multiply liquidcoast by this much
// sv_floorcoastforce -1.0 // overrides world variable: floorcoast
// sv_floorcoastscale 1.0 // multiply floorcoast by this much
// sv_aircoastforce -1.0 // overrides world variable: aircoast
// sv_aircoastscale 1.0 // multiply aircoast by this much
// sv_slidecoastforce -1.0 // overrides world variable: slidecoast
// sv_slidecoastscale 1.0 // multiply slidecoast by this much
// sv_movespeed 100.0 // baseline movement speed
// sv_movecrawl 0.6 // multiplier of speed when crawling
// sv_movesprint 1.6 // multiplier of speed when sprinting
// sv_movejet 1.6 // multiplier of speed when using jetpack
// sv_movestraight 1.2 // multiplier of speed when only moving forward
// sv_movestrafe 1.0 // multiplier of speed when strafing
// sv_moveinair 0.9 // multiplier of speed when in-air
// sv_movestepup 0.95 // multiplier of speed when stepping up
// sv_movestepdown 1.15 // multiplier of speed when stepping down
// sv_jumpspeed 110.0 // extra velocity to add when jumping
// sv_impulsespeed 90.0 // extra velocity to add when impulsing
// sv_impulselimit 0.0 // maximum impulse speed
// sv_impulseboost 1.0 // multiplier of impulse when just boosting
// sv_impulsedash 1.2 // multiplier of impulse when dashing
// sv_impulsejump 1.1 // multiplier of impulse when jumping
// sv_impulsemelee 0.75 // multiplier of impulse when using melee
// sv_impulseparkour 1.0 // multiplier of impulse when doing other parkour
// sv_impulseallowed 15 // determines which impulse actions are allowed (bitwise OR); 0 = off, 1 = dash, 2 = boost, 4 = sprint, 8 = parkour
// sv_impulsestyle 1 // impulse style; 0 = off, 1 = touch and count, 2 = count only, 3 = freestyle
// sv_impulsemeter 20000 // impulse dash length; 0 = unlimited, anything else = timer
// sv_impulsecount 6 // number of impulse actions per air transit
// sv_impulsedelay 250 // minimum time between boosts
// sv_impulseslide 750 // time before powerslides end
// sv_impulsecost 4000 // cost of impulse jump
// sv_impulseskate 1000 // length of time a run along a wall can last
// sv_impulsesprint 0.0 // sprinting counts toward impulse; 0 = off, anything else = multiplier of time
// sv_impulseregen 4.0 // impulse regen multiplier
// sv_impulseregencrouch 2.0 // impulse regen modifier when crouching
// sv_impulseregensprint 0.75 // impulse regen modifier when sprinting
// sv_impulseregenmove 1.0 // impulse regen modifier when moving
// sv_impulseregeninair 0.75 // impulse regen modifier when in air
// sv_stillspread 0.0 // multiply projectile spread by this much when standing still
// sv_movespread 1.0 // multiply projectile spread by this much when moving
// sv_inairspread 1.0 // multiply projectile spread by this much when jumping/in-air
// sv_impulsespread 1.0 // multiply projectile spread by this much when impulsing/sprinting/jetpacking
// sv_explodescale 1.0 // multiply explosion radius by this amount
// sv_explodelimited 0.5 // multiply explosion radius by this amount in limited situations (eg. instagib)
// sv_damagescale 1.0 // scale damage by this amount
// sv_criticalchance 100 // offset of hits that do damage in which criticals can occur
// sv_hitpushscale 1.0 // scale hit pushes by this amount
// sv_hitslowscale 1.0 // multiply "slow target on hit" by this amount
// sv_deadpushscale 2.0 // scale hit pushes by this amount when it results in a frag
// sv_wavepushscale 1.0 // scale of the hitpush force used in a wavepush
// sv_kickpushscale 1.0 // multiply kick pushes from weapons by this much
// sv_kickpushcrouch 0.0 // multiply kick pushes from weapons by this much when crouching
// sv_kickpushsway 0.0125 // multiply kick push effect on hud gun sway by this much
// sv_kickpushzoom 0.125 // multiply kick pushes from weapons by this much when zoomed
// sv_multikilldelay 5000 // time in milliseconds multiple kills in a row must occur
// sv_spreecount 5 // number of consecutive frags for each spree level
// sv_dominatecount 5 // number of frags on a single player without revenge before it is considered domination
//
// weapon variables are in the form of sv_<weapon><attribute>[1|2], where weapon is the name of the weapon
//  attribute is one of the following attributes, and 1|2 applies if the attribute differs between primary and secondary
//
//  add: the amount added when picking up the weapon or reloading it
//  max: the maximum amount the clip of this weapon can hold, can never be higher than default
//  sub[1|2]: the amount taken from the clip for each firing action, set to zero for unlimited ammo
//  adelay[1|2]: the time it takes after each firing action for the weapon to be ready again
//  rdelay: the time it takes for the weapon to reload one 'add' unit
//  damage[1|2]: the amount of damage a projectile from each firing action does
//  speed[1|2]: the speed of a projectile from each firing action
//  power[1|2]: when more than zero, determines that the weapon can be 'cooked' this long before firing
//  time[1|2]: the maximum lifetime of a projectile for each firing action
//  pdelay[1|2]: when more than zero, projectiles from this weapon will be delayed this long
//  gdelay[1|2]: when more than zero, projectiles from this weapon will delay guided settings by this long
//  edelay[1|2]: when more than zero, projectiles from this weapon will not be able to hurt its owner for this long
//  explode[1|2]: if more than zero, a projectile from this firing action will explode at the end of its life or based on collision settings
//  rays[1|2]: the amount of projectiles spawned from one shot of each firing action
//  spread[1|2]: determines the amount a projectile from each firing action skews off-center
//  zdiv[1|2]: when zero, keeps spread projectiles aligned horizontally, else divide the z axis this much
//  aiskew[1|2]: determines 'added stupidity' for each weapon for AI counterparts
//  flakweap[1|2]: when projectiles from this firing action are destroyed, create projectiles from this kind of weapon (+10 = alt fire for the weapon)
//  flakdmg[1|2]: flak of this type deals this much damage
//  flakrays[1|2]: when creating flak, create this many projectiles for it
//  flaktime[1|2]: flak projectiles from this weapon last this long
//  flakspeed[1|2]: flak projectiles from this weapon start with this much speed (may be influenced by flakspread/flakskew and flakrel)
//  collide[1|2]: bitwise value which determines collision properties for a projectile from each firing action
//      IMPACT_GEOM = 1     BOUNCE_GEOM = 2     IMPACT_PLAYER = 4   BOUNCE_PLAYER = 8   RADIAL_PLAYER = 16  COLLIDE_TRACE = 32  COLLIDE_OWNER = 64  COLLIDE_CONT = 128  COLLIDE_STICK = 256
//  extinguish[1|2]: determines if a projectile from each firing action is extinguished by water
//  cooked[1|2]: determines cooking style for a projectile, 0 = off, 1 = scale size, 2 = shorten life (+1 no scale), 4 = lengthen life (+1 no scale)
//  guided[1|2]: determines guided style for a projectile, 0 = off, 1 = follow crosshair, 2 = home crosshair target (+1 only first target), 4 = home projectile target (+1 only first target)
//  radial[1|2]: boolean 0 or 1, sets a projectile for each firing action to do continuous radial damage inside the 'explode' radius during transit
//  residual[1|2]: boolean 0 or 1, determines if a projectile from each firing action has a residual effect, 0 = off, 1 = burns, 2 = bleeds
//  reloads: boolean 0 or 1, determines if this weapon can reload
//  zooms: boolean 0 or 1, determines if the secondary action on this weapon zooms
//  fullauto[1|2]: boolean 0 or 1, determines if each firing action is fully automatic (click-and-hold) or not (click-and-click)
//  allowed: determines if this weapon type is allowed to spawn at all, 0 = off, 1 = all but insta/duel, 2 = all but insta, 3 = always
//  laser: determines if this weapon has a laser pointer which is projected to the point where the player is aiming
//  critdash[1|2]: when more than zero, this weapon will always deal a critical hit this long after an impulse dash
//  taperin[1|2]: determines the maximum amount a projectile from each firing action is allowed to 'taper in' to over its lifetime
//  taperout[1|2]: determines the maximum amount a projectile from each firing action is allowed to 'taper out' to over its lifetime
//  elasticity[1|2]: multiplier of velocity for a projectile of each firing action when doing a bounce event
//  reflectivity[1|2]: guard angle for a projectile of each firing action when doing a bounce event
//  relativity[1|2]: multiplier of player velocity added to a projectile of each firing action
//  waterfric[1|2]: multiplier of velocity for a projectile of each firing action when in water
//  weight[1|2]: relative weight for a projectile of each firing action
//  radius[1|2]: determines the size for a projectile of each firing action
//  kickpush[1|2]: determines the amount of pushback from shooting each firing action
//  hitpush[1|2]: multiplier of damage for a projectile or explosion of each firing action impacting a player
//  slow[1|2]: slow target hit with a projectile from this by this ammount
//  aidist[1|2]: determines the 'maximum distance' a weapon can be shot at, used by AI to determine weapon effectiveness ranges
//  partsize[1|2]: determines the maximum particle size of a projectile from each firing action
//  partlen[1|2]: determines the maximum tape particle length of a projectile from each firing action
//  frequency: determines the multiplier of itemspawntime in which items of this type respawn in
//  pusharea: determines the multiplier of explode radius this weapon pushes in
//  critmult: determines the multiplier of damage when a critical hit is done (can be zero for off)
//  critdist: determines the distance at which the chance of a critical is multiplied linearly toward target
//  delta[1|2]: determines the amount by which each firing action is guided
//  trace[1|2]: determines the multiplier of length to apply to traced weapons
//  torsodmg[1|2]: determines the multiplier of damage for torso shots
//  legsdmg[1|2]: determines the multiplier of damage for leg shots
//  flakscale[1|2]: flak created by this firing action is scaled by this much
//  flakspread[1|2]: flak created by this firing action spreads its direction randomly by this much if it doesn't impact a player
//  flakrel[1|2]: flak created by this firing action retains this much of its parent relative momentum
//  flakffwd[1|2]: flak created by this firing action fast-forwards its lifecycle by this multiplier
//  flakoffset[1|2]: flak created by this firing action is offset by this distance if it impacts a player before being created
//  flakskew[1|2]: flak created by this firing action spreads its direction randomly by this much when it impacts a player
//
// EOF
