defaultmodifier = 0
modifier = $defaultmodifier
domodifier = [ modifier = $arg1; onrelease [ modifier = $defaultmodifier ] ]

deltastates = ["game" "dead" "dead" "edit" "spec" "wait"]
universaldelta = [
    delta = (format "delta_%1_%2" (at $deltastates (getstate)) $modifier)
    if (strcmp (getalias $delta) "") [
        delta = (format "delta_%1_%2" (at $deltastates (getstate)) $defaultmodifier)
        if (strcmp (getalias $delta) "") [
            delta = (format "delta_%1_%2" (at $deltastates 0) $modifier)
            if (strcmp (getalias $delta) "") [
                delta = (format "delta_%1_%2" (at $deltastates 0) $defaultmodifier)
            ]
        ]
    ]
    if (getalias $delta) [ do [@delta @arg1] ]
]; setcomplete universaldelta 1

listcomplete editmat "air water clip glass noclip lava death aiclip ladder alpha"
air = [ editmat air ]; setcomplete air 1
water = [ editmat water ]; setcomplete water 1
clip = [ editmat clip ]; setcomplete clip 1
glass = [ editmat glass ]; setcomplete glass 1
noclip = [ editmat noclip ]; setcomplete noclip 1
lava = [ editmat lava ]; setcomplete lava 1
death = [ editmat death ]; setcomplete death 1
aiclip = [ editmat aiclip ]; setcomplete aiclip 1
ladder = [ editmat ladder ]; setcomplete ladder 1
alpha = [ editmat alpha ]; setcomplete alpha 1

//////// Entity Editing ///////////////

// the entity type of current selection
et = [ at (entget) 0 ]

// access the given attribute of selected ent
ea = [ at (entget) $arg1 ]

// clear ents of given type
clearents = [ 
  if $editing [
    entcancel
    entselect [ strcmp (et) $arg1 ]; 
    echo Deleted (enthavesel) $arg1 entities; 
    delent
  ] 
]; setcomplete clearents 1

// replace all ents that match current selection
// with the values given
replaceents = [
  if $editing [
    do [
        entfind @(entget)
        entset @(loopconcat i $numargs [result $[arg@(+ $i 1)]])
    ]
    echo Replaced (enthavesel) entities  
  ]
]; setcomplete replaceents 1

selentedit      = [ "saycommand" ( concatword "/entset " (entget) ) ]; setcomplete selentedit 1
selreplaceents  = [ "saycommand" ( concatword "/replaceents " (entget) ) ]; setcomplete selreplaceents 1
selentfindall   = [ do [ @( concatword "entfind " (entget) ) ] ]; setcomplete selentfindall 1

// modify given attribute of ent by a given amount
// arg1 attribute
// arg2 value
entvalue = [
    e = (entget)
    do [entset @(loopconcat i (listlen $e) [
        if (= $i (+ @arg1 1)) [
            + (at $e $i) @@arg2
        ] [
            at $e $i
        ]
    ])]
]; setcomplete entvalue 1

entproperty = [
  entloop [ entvalue @arg1 @arg2 ]
]; setcomplete entproperty 1

//////// Copy and Paste //////////////

// 3 types of copying and pasting
// 1. select only cubes      -> paste only cubes
// 2. select cubes and ents  -> paste cubes and ents. same relative positions
// 3. select only ents       -> paste last selected ent. if ents are selected, replace attrs as paste

opaquepaste = 1
entcopybuf = ""

entreplace   = [ 
  do [
    if (enthavesel) [] [ newent @entcopybuf ]
    entset @entcopybuf 
  ]
]; setcomplete entreplace 1

editcopy   = [
  if (|| havesel [! (enthavesel)]) [
    entcopybuf = ""
    entcopy
    copy
  ] [
    entcopybuf = (entget)
  ]
]; setcomplete editcopy 1

editpaste  = [ 
  cancelpaste = (! (|| enthavesel havesel));
  if (strcmp "" $entcopybuf) [
    pastehilight
    onrelease [ 
      if (opaquepaste) delcube 
      paste
      entpaste
      if ($cancelpaste) [ cancelsel ] 
    ] 
  ] [
    entreplace
    if ($cancelpaste) [ cancelsel ] 
  ] 
]; setcomplete editpaste 1

/////// Selection ///////////////

equaltype  = [
  if (strcmp * $arg1) [ result 1 ] [
    result (strcmp (et) $arg1)
  ]
]

equalattr  = [
  if (strcmp * $arg2) [ result 1 ] [
    result (= (ea $arg1) $arg2)
  ]
]

// select ents with given properties
// '*' is wildcard
entfind    = [ 
  if (= $numargs 0) [
    entselect 1
  ] [
    entselect (concat [ && [equaltype @@arg1] ] (loopconcat i (- $numargs 1) [
        result [ [equalattr @@i @@[arg@(+ $i 2)]] ]
    ]))
  ]
]; setcomplete entfind 1

entfindinsel = [ 
  if (= $numargs 0) [
    entselect [ insel ]
  ] [
    entselect (concat [ && [insel] [equaltype @@arg1] ] (loopconcat i (- $numargs 1) [
        result [ [equalattr @@i @@[arg@(+ $i 2)]] ]
    ]))
  ]
]; setcomplete entfindinsel 1

lse        = [
  line = ""
  count = 0
  entloop [
    line  = ( concatword $line (entget) "       " )
    count = ( + $count 1 )
    if (> $count 4) [
      echo $line
      line = ""
      count = 0
    ]
  ]
  if (> $count 0 ) [ echo $line ]
  echo (enthavesel) entities selected
]; setcomplete lse 1

enttoggle  = [ entmoving 1; entmoving 0; ]; setcomplete enttoggle 1
entaddmove = [ entmoving 2 ]; setcomplete entaddmove 1

grabbing = 0

drag       = [ dragging 1; onrelease [ dragging 0 ] ]
corners    = [ selectcorners 1; dragging 1; onrelease [ selectcorners 0; dragging 0 ] ]
entadd     = [ entaddmove; entmoving 0; ]; setcomplete entadd 1
editmove   = [ moving 1; onrelease [ moving 0 ]; result $moving ]
entdrag    = [ entaddmove; onrelease [entmoving 0]; result $entmoving ] 

editdrag   = [ cancelsel; || (entdrag) [ drag ] ]; setcomplete editdrag 1
selcorners = [ if ($hmapedit) [ hmapselect ] [ cancelsel; || (entdrag) [ corners ] ] ]; setcomplete selcorners 1
editextend = [ || entdrag [ selextend; reorient; editmove ] ]; setcomplete editextend 1

editmovewith    = [
  if (havesel) [
    || (editmove) [ @arg1 ]
    onrelease [ moving 0; dragging 0 ]
  ] [
    @arg1
  ]
]

editmovecorner = [ editmovewith selcorners ]; setcomplete editmovecorner 1
editmovedrag   = [ editmovewith editdrag ]; setcomplete editmovedrag 1

////// Other Editing commands /////////

editfacewentpush = [ 
  if (|| [havesel] [! (enthavesel)] ) [
    if ($moving) [ 
      pushsel $arg1 
    ] [ 
      entcancel
      editface $arg1 $arg2
    ] 
  ] [
      if ($entmoving) [ entpush $arg1 ]
  ]
]; setcomplete editfacewentpush 1

entswithdirection = ["playerstart 0" "mapmodel 1" "teledest 0" "camera 0"]

inlist = [
  r = 0
  n = ( listlen $arg2 )
  loop i $n [
    if (strcmp $arg1 (at $arg2 $i)) [
      r = 1 
    ]
  ]
  result $r
]

indict = [
  r = $arg3
  n = (listlen $arg2)
  loop i $n [
    assoc = (at $arg2 $i)
    if (strcmp $arg1 (at $assoc 0)) [
      r = (at $assoc 1) 
    ]
  ]
  result $r
]

editdel    = [ if (= (enthavesel) 0) [ delcube ] [ delent ] ]; setcomplete editdel 1
editflip   = [ if (= (enthavesel) 0) [ flip ] [ entflip ] ]; setcomplete editflip 1

editrotate = [ 
  rotate $arg1
  entrotate $arg1 
]; setcomplete editrotate 1

editcut    = [  
  hadselection = (havesel)
  moving 1
  if ($moving) [
    copy;     entcopy
    delcube;  delent
    onrelease [ 
      moving 0
      paste
      entpaste
      if ( ! $hadselection ) [ cancelsel ]
    ]
  ]
]; setcomplete editcut 1

selectents = [ entselect [&& (insel) (enttype $arg1)] ]; setcomplete selectents 1

noautosave = 0
autosave = [
    if (= $noautosave 0) [
        savemap
        sleep 600000 [ autosave ]
    ] [ noautosave = 0 ]
]; setcomplete autosave 1
stopautosave = [ noautosave = 1 ]; setcomplete stopautosave 1

togglesound = [ if (> $mastervol 0) [ mastervol 0; echo "sound off" ] [ mastervol 255; echo "sound on" ] ]; setcomplete togglesound 1

changeoutline = [
    outlinestatus = (mod (+ $arg1 $outlinestatus) (listlen $outlinecolours))
    if (< $outlinestatus 0) [
        outlinestatus = (+ (listlen $outlinecolours) $outlinestatus ) //just making sure it'll fit
    ]
    
    if (=s (at $outlinecolours $outlinestatus) "OFF") [
        echo "Outline OFF"
        outline 0
    ] [
        echo (concat "Outline" (at $outlinecolours $outlinestatus))
        outline 1
        outlinecolour @(at $outlinecolours $outlinestatus)
    ]
]; setcomplete changeoutline 1
outlinecolours = ["255 0 0" "0 255 0" "255 255 255" "0 0 0" "255 255 0" "255 0 255" "0 255 255" "0 255 127" "255 127 0" "127 0 255" "255 0 127" "0 127 255" "OFF"]
outlinestatus = 0

loadsky = [
    skybox $arg1
    if (> $numargs 1) [spinsky $arg2]
    if (> $numargs 2) [yawsky $arg3]
]; setcomplete loadsky 1
mapmsg = [maptitle $arg1]; setcomplete mapmsg 1
cloudalpha = [cloudblend $arg1]
savecurrentmap = [ savemap ]
