// This file controls server side variables which influence gameplay (which must be prefixed with 'sv_')
// It is executed whenever variables are reset (on start, and whatever 'resetvarsonend' tells it to)
//
// sv_serverclients 16 // maximum number of allowed clients
// sv_serverdesc "My server" // server description
// sv_servermotd "Welcome to my server!" // server message of the day
// sv_serveropen 3 // determines server openness for public use; 0 = allow "setmaster 1" and locked/private, 1 = allow "setmaster 1" but no mastermode, no locked/private, 2 = allow "setmaster 1" but disallows private mastermode (for public coop-editing), 3 = master only by "auth" or admin
// sv_automaster 0 // determines if authorities claim status by default
// sv_modelimit 4 // determines the lowest mode which is allowed to be used as dictated by modelock
// sv_mutslimit 63 // determines the mutators which are allowed to be used as dictated by modelock
// sv_modelock 4 // determines if modes are locked; 0 = off, 1 = master only (+1 admin only), 3 = non-admin can only set limited mode and higher (+1 locked completely)
// sv_mapslock 2 // determines if maps are locked; 0 = off, 1 = master can select non-allow maps (+1 admin), 3 = master can select non-rotation maps (+1 admin), 5 = no map selection
// sv_varslock 1 // determines if vars are locked; 0 = off, 1 = admin only, 2 = nobody
// sv_votewait 3000 // time in milliseconds before a player may cast another vote (to avoid flooding)
// sv_resetmmonend 2 // determines when mastermode changes are reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetbansonend 1 // determines when the ban list is reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_resetvarsonend 2 // determines when these game variables are reset; 0 = off, 1 = just when empty, 2 = when matches end
// sv_gamespeed 100 // override gameplay speed
// sv_gamepaused 0 // pauses the game, automatically unset by server
// sv_defaultmap "" // default map, "" = random
// sv_defaultmode 0 // default game mode; -2 = random
// sv_defaultmuts 0 // default mutators; -2 = random
// sv_campaignplayers 5 // number of players in campaign
// sv_campaignmaps "" // campaign maps
// sv_allowmaps "" // allowed maps
// sv_duelmaps "" // duel maps
// sv_mainmaps "" // deathmatch maps
// sv_ctfmaps "" // ctf maps
// sv_mctfmaps "" // multi-ctf maps
// sv_stfmaps "" // stf maps
// sv_trialmaps "" // time-trial maps
// sv_maprotate 2 // server side map rotation of above maps; 0 = off, 1 = sequence, 2 = random
// sv_maxcarry 2 // maximum number of weapons a player can carry
// sv_spawnrotate 2 // spawn point rotation; 0 = let client decide, 1 = sequence, 2 = random
// sv_spawnweapon 1 // weapon players spawn with, defaults to pistol (1)
// sv_instaweapon 7 // weapon players spawn with in instagib, defaults to rifle (7)
// sv_trialweapon 0 // weapon players spawn with in trial, defaults to melee only (0)
// sv_spawngrenades 0 // spawn with grenades; 0 = never, 1 = all but instagib/time-trial, 2 = always
// sv_spawndelay 3000 // time in milliseconds before players can respawn in most modes
// sv_instadelay 1500 // time in milliseconds before players can respawn in instagib mutated modes
// sv_trialdelay 500 // time in milliseconds before players can respawn in trial mode
// sv_spawnprotect 3000 // time in milliseconds after spawning players cannot be damaged
// sv_duelprotect 5000 // .. in duel/survivor matches
// sv_instaprotect 1500 // .. in instagib matches
// sv_maxhealth 100 // maximum health (in all but instagib mutated modes)
// sv_extrahealth 100 // maximum extra health (overcharge which slowly reduces back to max)
// sv_fireburntime 5500 // time in milliseconds fire burns for, try to allow an extra 500ms breathing room for sync
// sv_fireburndelay 1000 // time in milliseconds for which fire burning deals damage
// sv_fireburndamage 5 // amount of damage fire burning deals
// sv_vampire 0 // when players deal damage, they regenerate
// sv_regendelay 3000 // time in milliseconds after being damage before normal regeneration resumes
// sv_regenguard 1000 // as above, but when guarding the team affinity (flags, etc)
// sv_regentime 1000 // time in milliseconds for which regenerate gives health
// sv_regenhealth 5 // amount of health regneration gives
// sv_regenextra 10 // amount of health regeneration gives when guarding the team affinity
// sv_itemsallowed 1 // determines if items are present in the level; 0 = never, 1 = all but instagib, 2 = always
// sv_itemspawntime 30000 // time in milliseconds before items (re)spawn
// sv_itemspawndelay 1000 // time in milliseconds after map start items first spawn
// sv_itemthreshold 1 // if numspawned < numclients*this, spawn one of this type
// sv_itemspawnstyle 1 // determines the timing of item spawning at map start; 0 = all at once, 1 = staggered, 2 = random, 3 = randomise between both
// sv_kamikaze 1 // determines the level of kamikaze events; 0 = never, 1 = holding grenade, 2 = have grenade, 3 = always
// sv_timelimit 15 // time in minutes before round ends; 0 = off
// sv_triallimit 60000 // time in milliseconds after the first player crosses the finishing line in a non-looping trial map players have to complete
// sv_intermlimit 15000 // time in milliseconds intermission lasts
// sv_votelimit 30000 // time in milliseconds intermission voting lasts
// sv_duellimit 3000 // time in milliseconds before next round in duel/survivor
// sv_duelclear 0 // determines if items are reset at the end of each round
// sv_selfdamage 1 // determines if the player can damage themselves
// sv_teamdamage 1 // determines if the player can damage team members; 0 = off, 1 = non-bots damage team, 2 = all players damage team
// sv_teambalance 2 // determines the method of team balancing; 0 = off, 1 = by number, 2 = by rank, 3 = humans vs. ai
// sv_fraglimit 0 // number of frags required to end the round (and win) in ffa modes
// sv_ctflimit 0 // number of captures required to end the round (and win) in ctf
// sv_ctfstyle 0 // determines the style of ctf play; 0 = classic touch-and-return, 1 = grab and take home, 2 = defend and reset, 3 = dominate and protect
// sv_ctfresetdelay 30000 // time in milliseconds before a dropped flag automatically resets (and penalises the team)
// sv_stflimit 0 // determines the style of stf play; number of points required to end the round (and win) in stf
// sv_stfstyle 1 // 0 = overthrow and secure, 1 = instant secure
// sv_stffinish 0 // determines if the round ends when a team secures all flags in stf
// sv_stfpoints 1 // number of points given in stf
// sv_stfoccupy 100 // occupation multiple for determing the interval where points are given
// sv_stfflags 3 // flags to init and how; 0 = init all (neutral), 1 = init neutral and team only, 2 = init team only, 3 = init all (team + neutral + converted)
// sv_skillmin 70 // minimum randomly assigned AI skill level
// sv_skillmax 90 // maximum randomly assigned AI skill level
// sv_botbalance 1 // determines bot balancing method; 0 = turn off bots, 1 = fill only with enough bots to satisfy play, 2 = populate bots to numplayers
// sv_botscale 1.0 // scale the 'numplayers' world variable which determines bot auto population
// sv_botlimit 16 // maximum number of bots allowed, regardless of any other variable/setting
// sv_enemyallowed 2 // determines if enemies like zombies spawn, 0 = off (campaign only), 1 = deathmatch, 2 = instagib too
// sv_enemybalance 1 // multiply number of enemy spawns by this much
// sv_enemyspawntime 60000 // determine length of time before enemies respawn
// sv_enemyspawndelay 2000 // determine length of time after map start enemies first spawn
// sv_enemyspawnstyle 1 // determines enemy spawning style, 0 = all at once, 1 = staggered, 2 = random, 3 = randomise between both
// sv_forcegravity -1 // overrides world variable: gravity
// sv_forceliquidspeed -1 // overrides world variable: liquidspeed
// sv_forceliquidcurb -1 // overrides world variable: liquidcurb
// sv_forcefloorcurb -1 // overrides world variable: floorcurb
// sv_forceaircurb -1 // overrides world variable: aircurb
// sv_jumpspeed 100 // extra velocity to add when jumping
// sv_movespeed 75 // baseline movement speed
// sv_movecrawl 0.5 // multiplier of speed when crawling
// sv_impulsespeed 75 // extra velocity to add when impulsing
// sv_impulseallowed 3 // determines if impulse is allowed; 0 = off, 1 = dash/boost only, 2 = dash/boost and sprint, 3 = all mechanics including parkour
// sv_impulsestyle 1 // impulse style; 0 = off, 1 = touch and count, 2 = count only, 3 = freestyle
// sv_impulsemeter 0 // impulse dash length; 0 = unlimited, anything else = timer
// sv_impulsecost 500 // cost of impulse jump
// sv_impulsecount 10 // number of impulse actions per air transit
// sv_impulseskate 750 // length of time a run along a wall can last
// sv_impulseregen 10 // impulse regen multiplier
// sv_stillspread, 1.5 // multiply projectile spread by this much when standing still
// sv_movespread 3.0 // multiply projectile spread by this much when moving
// sv_jumpspread 3.0 // multiply projectile spread by this much when jumping/in-air
// sv_impulsespread 6.0 // multiply projectile spread by this much when impulsing/sprinting
// sv_normalscale 1 // multiply explosion radius by this amount
// sv_limitedscale 0.5f // multuply explosion radius by this amount in limited situations (eg. instagib)
// sv_damagescale 1.0 // scale damage by this amount
// sv_damagecritchance 100 // offset of hits that do damage in which criticals can occur
// sv_hitpushscale 1.0 // scale hit pushes by this amount
// sv_slowscale 1 // multiply "slow target on hit" by this amount
// sv_deadpushscale 2.0 // scale hit pushes by this amount when it results in a frag
// sv_wavepushscale 1.0 // scale of the hitpush force used in a wavepush
// sv_kickpushscale 1 // multiply kick pushes from weapons by this much
// sv_kickpushcrouch 0.5 // multiply kick pushes from weapons by this much when crouching
// sv_kickpushsway 0.25 // multiply kick push effect on hud gun sway by this much
// sv_kickpushzoom 0.125 // multiply kick pushes from weapons by this much when zoomed
// sv_multikilldelay 3000 // time in milliseconds multiple kills in a row must occur
// sv_spreecount 5 // number of consecutive frags for each spree level
// sv_dominatecount 5 // number of frags on a single player without revenge before it is considered domination
// sv_alloweastereggs 1 // determines if special easter egg effects are enabled
// sv_returningfire 0 // determines if projectiles fired return to the owner (easter egg enabled)
//
// weapon variables are in the form of sv_<weapon><attribute>[1|2], where weapon is the name of the weapon
//  attribute is one of the following attributes, and 1|2 applies if the attribute differs between primary and secondary
//
//  add: the amount added when picking up the weapon or reloading it
//  max: the maximum amount the clip of this weapon can hold, can never be higher than default
//  sub[1|2]: the amount taken from the clip for each firing action, set to zero for unlimited ammo
//  adelay[1|2]: the time it takes after each firing action for the weapon to be ready again
//  rdelay: the time it takes for the weapon to reload one 'add' unit
//  damage[1|2]: the amount of damage a projectile from each firing ation does
//  speed[1|2]: the speed of a projectile from each firing action
//  power[1|2]: when more than zero, determines that the weapon can be 'cooked' this long before firing
//  time[1|2]: the maximum lifetime of a projectile for each firing action
//  pdelay[1|2]: when more than zero, projectiles from this weapon will be delayed this long
//  gdelay[1|2]: when more than zero, projectiles from this weapon will delay guided settings by this long
//  edelay[1|2]: when more than zero, projectiles from this weapon will not be able to hurt its owner for this long
//  explode[1|2]: if more than zero, a projectile from this firing action will explode at the end of its life or based on collision settings
//  rays[1|2]: the amount of projectiles spawned from one shot of each firing action
//  spread[1|2]: determines the amount a projectile from each firing action skews off-center
//  zdiv[1|2]: when zero, keeps spread projectiles aligned horizontally, else divide the z axis this much
//  aiskew[1|2]: determines 'added stupidity' for each weapon for AI counterparts
//  collide[1|2]: bitwise value which determines collision properties for a projectile from each firing action
//      IMPACT_GEOM = 1     BOUNCE_GEOM = 2     IMPACT_PLAYER = 4   BOUNCE_PLAYER = 8   RADIAL_PLAYER = 16  COLLIDE_TRACE = 32  COLLIDE_OWNER = 64  COLLIDE_CONT = 128  COLLIDE_STICK = 256
//  extinguish[1|2]: determines if a projectile from each firing action is extinguished by water
//  cooked[1|2]: determines cooking style for a projectile, 0 = off, 1 = scale size, 2 = shorten life (+1 no scale), 4 = lengthen life (+1 no scale)
//  guided[1|2]: determines guided style for a projectile, 0 = off, 1 = follow crosshair, 2 = home crosshair target (+1 only first target), 4 = home projectile target (+1 only first target)
//  radial[1|2]: boolean 0 or 1, sets a projectile for each firing action to do continuous radial damage inside the 'explode' radius during transit
//  burns[1|2]: boolean 0 or 1, determines if a projectile from each firing action burns on contact
//  reloads: boolean 0 or 1, determines if this weapon can reload
//  zooms: boolean 0 or 1, determines if the secondary action on this weapon zooms
//  fullauto[1|2]: boolean 0 or 1, determines if each firing action is fully automatic (click-and-hold) or not (click-and-click)
//  allowed: determines if this weapon type is allowed to spawn at all, 0 = off, 1 = all but insta/duel, 2 = all but insta, 3 = always
//  critdash[1|2]: when more than zero, this weapon will always deal a critical hit this long after an impulse dash
//  taper[1|2]: determines the maximum amount a projectile from each firing action is allowed to 'taper off' to over its lifetime
//  elasticity[1|2]: multiplier of velocity for a projectile of each firing action when doing a bounce event
//  reflectivity[1|2]: guard angle for a projectile of each firing action when doing a bounce event
//  relativity[1|2]: multiplier of player velocity added to a projectile of each firing action
//  waterfric[1|2]: multiplier of velocity for a projectile of each firing action when in water
//  weight[1|2]: relative weight for a projectile of each firing action
//  radius[1|2]: determines the size for a projectile of each firing action
//  kickpush[1|2]: determines the amount of pushback from shooting each firing action
//  hitpush[1|2]: multiplier of damage for a projectile or explosion of each firing action impacting a player
//  slow[1|2]: slow target hit with a projectile from this by this ammount
//  maxdist[1|2]: determines the 'maximum distance' a weapon can be shot at, used by AI to determine weapon effectiveness ranges
//  partsize[1|2]: determines the maximum particle size of a projectile from each firing action
//  partlen[1|2]: determines the maximum tape particle length of a projectile from each firing action
//  frequency: determines the multiplier of itemspawntime in which items of this type respawn in
//  pusharea: determines the multiplier of explode radius this weapon pushes in
//  critmult: determines the multiplier of damage when a critical hit is done (can be zero for off)
//  critdist: determines the distance at which the chance of a critical is multiplied linearly toward target
//  delta[1|2]: determines the amount by which each firing action is guided
//
// EOF
